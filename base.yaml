name: omnibox-local

services:
  backend:
    ports:
      - "${OBB_PORT:-8000}:${OBB_PORT:-8000}"
    env_file:
      - .env
    environment:
      OBB_DB_HOST: postgres
      OBB_MINIO_ENDPOINT: http://username:password@minio:9000
      OBB_WIZARD_BASE_URL: http://wizard:8000
      OBB_MEILI_HOST: http://meilisearch:7700
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "-O-", "http://127.0.0.1:${OBB_PORT:-8000}/api/v1/health" ]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:17-alpine
    ports:
      - '${OBB_DB_PORT:-5432}:${OBB_DB_PORT:-5432}'
    environment:
      - POSTGRES_DB=${OBB_DB_DATABASE:-omnibox}
      - POSTGRES_USER=${OBB_DB_USERNAME:-omnibox}
      - POSTGRES_PASSWORD=${OBB_DB_PASSWORD:-omnibox}
      - POSTGRES_PORT=${OBB_DB_PORT:-5432}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${OBB_DB_DATABASE:-omnibox}", "-U", "${OBB_DB_USERNAME:-omnibox}", "-p", "${OBB_DB_PORT:-5432}" ]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    command: 'server /data --console-address ":9001"'
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    restart: always
    environment:
      MINIO_ROOT_USER: username
      MINIO_ROOT_PASSWORD: password
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://127.0.0.1:9000/minio/health/live" ]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - '9001:9001'
      - '9000:9000'

  meilisearch:
    image: getmeili/meilisearch
    container_name: meilisearch
    restart: always
    environment:
      - MEILI_MASTER_KEY=${OBB_MEILI_KEY}

  init:
    image: alpine/curl:8.10.0
    command: 
      - 'http://backend:${OBB_PORT:-8000}/internal/api/v1/sign-up'
      - '-H'
      - 'Content-Type: application/json'
      - '-d'
      - '{"username":"username","password":"Passw0rd","password_repeat":"Passw0rd","email":"omnibox@qq.com"}'
    depends_on:
      backend:
        condition: service_healthy
